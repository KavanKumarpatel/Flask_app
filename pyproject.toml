[tool.poetry]
name = "flask-dash-app"
version = "0.1.0"
description = "Integrate Plotly Dash into your Flask applications."
authors = ["tzelleke <it@tzelleke.com>"]
maintainers = ["tzelleke <it@tzelleke.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/tzelleke/flask-dash-app"
keywords = [
    "Flask",
    "Plotly",
    "Plotly Dash",
    "Data Science"
]


[tool.poetry.dependencies]
python = "~3.11"
dash = "^2.13.0"
dash-bootstrap-components = "^1.5.0"
flask = "<2.3"
markdown = "^3.4.4"
pandas = "^2.1.1"
pygments = "^2.16.1"
scikit-learn = "^1.3.1"


[tool.poetry.group.dev.dependencies]
black = "^23.9.1"
ruff = "^0.0.291"
pre-commit = "^3.4.0"


[tool.black]
include = '\.pyi?$'
line-length = 88
target-version = ["py310"]


[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
]
typing-modules = ["mypackage._compat.typing"]
src = ["src"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
line-length = 88
target-version = "py310"

[tool.ruff.isort]
force-sort-within-sections = true

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"__init__.py" = ["F401"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
